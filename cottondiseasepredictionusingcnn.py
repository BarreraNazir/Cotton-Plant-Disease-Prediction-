# -*- coding: utf-8 -*-
"""CottonDiseasePredictionUsingCNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AkQd1JiLn8-CNbMXHzJSsBHSvvtgR-fL

**Data Source =** [Cotton Plant Disease Prediction](https://drive.google.com/drive/folders/1vdr9CC9ChYVW2iXp6PlfyMOGD-4Um1ue)

**Loading Libraries**
"""

import keras
from keras.preprocessing.image import ImageDataGenerator # expand the size of training datasets
from keras.optimizers import Adam # Compiling CNN Model
from keras.callbacks import ModelCheckpoint
import matplotlib.pyplot as plt
import numpy as np

"""**Loading Data**"""

training_path = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/train"
validation_path = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/val"

"""**Generating Training Dataset**"""

training_datagenerator = ImageDataGenerator(rescale=1./255,
                                            rotation_range= 40,
                                            width_shift_range=0.2,
                                            height_shift_range=0.2,
                                            shear_range= 0.2,
                                            zoom_range=0.2,
                                            horizontal_flip=True,
                                            fill_mode='nearest') # return images with different angle of single image

training_data = training_datagenerator.flow_from_directory( training_path, 
                                           target_size=(150, 150),
                                           batch_size=32,
                                           class_mode='categorical') # input images are of different size, we need images of same sizes (150,150)

valid_datagenerator = ImageDataGenerator(rescale=1./255)

valid_data = valid_datagenerator.flow_from_directory( validation_path,
                                           target_size=(150, 150),
                                           batch_size=32,
                                           class_mode='categorical')

"""**Class Index**"""

training_data.class_indices

"""**Plotting Images**"""

def plotImages(images_arr):
    fig, axes = plt.subplots(1, 5, figsize=(20, 20))
    axes = axes.flatten()
    for img, ax in zip(images_arr, axes):
        ax.imshow(img)
    plt.tight_layout()
    plt.show()

"""Same Images but with different Variation/Angles"""

images = [training_data[0][0][0] for i in range(5)]
plotImages(images)

"""**Building CNN Model**"""

cnn_model = keras.models.Sequential([
                                    keras.layers.Conv2D(filters=32, kernel_size=3, input_shape=[150, 150, 3]),
                                    keras.layers.MaxPooling2D(pool_size=(2,2)),
                                    keras.layers.Conv2D(filters=64, kernel_size=3),
                                    keras.layers.MaxPooling2D(pool_size=(2,2)),
                                    keras.layers.Conv2D(filters=128, kernel_size=3),
                                    keras.layers.MaxPooling2D(pool_size=(2,2)),                                    
                                    keras.layers.Conv2D(filters=256, kernel_size=3),
                                    keras.layers.MaxPooling2D(pool_size=(2,2)),

                                    keras.layers.Dropout(0.5),                                                                        
                                    keras.layers.Flatten(), # neural network beulding
                                    keras.layers.Dense(units=128, activation='relu'), # input layers
                                    keras.layers.Dropout(0.1),                                    
                                    keras.layers.Dense(units=256, activation='relu'),                                    
                                    keras.layers.Dropout(0.25),                                    
                                    keras.layers.Dense(units=4, activation='softmax') # output layer
])

"""**Compiling CNN Model**"""

cnn_model.compile(optimizer = Adam(lr=0.0001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])

cnn_model.summary()

model_path = '/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/cotton_plant_disease_predictor.h5'

checkpoint = ModelCheckpoint(model_path, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')
callbacks_list = [checkpoint]

history = cnn_model.fit(training_data, 
                          epochs=500, 
                          verbose=1, 
                          validation_data= valid_data,
                          callbacks=callbacks_list)

"""**Visualizing Accuracy/Loss Results**"""

# summarize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""**Testing the Prediction Model**

Importing Libraries
"""

import numpy as np
import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image

"""Importing Trained Model"""

model_path = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/cotton_plant_disease_predictor.h5"
trained_model = keras.models.load_model(model_path)

"""Loading Test Images"""

fl1 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/fresh cotton leaf/d (122)_iaip.jpg"
fl2 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/fresh cotton leaf/d (133)_iaip.jpg"
fl3 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/fresh cotton leaf/d (198)_iaip.jpg"
fl4 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/fresh cotton leaf/d (220)_iaip.jpg"

dl1 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/diseased cotton leaf/dis_leaf (124).jpg"
dl2 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/diseased cotton leaf/dis_leaf (153)_iaip.jpg"
dl3 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/diseased cotton leaf/dis_leaf (173)_iaip.jpg"
dl4 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/diseased cotton leaf/dis_leaf (175)_iaip.jpg"

fp1 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/fresh cotton plant/dsd (140)_iaip.jpg"
fp2 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/fresh cotton plant/dsd (153)_iaip.jpg"
fp3 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/fresh cotton plant/dsd (160)_iaip.jpg"
fp4 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/fresh cotton plant/dsd (195)_iaip.jpg"

dp1 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/diseased cotton plant/dd (16)_iaip.jpg"
dp2 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/diseased cotton plant/dd (176)_iaip.jpg"
dp3 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/diseased cotton plant/dd (188)_iaip.jpg"
dp4 = "/content/drive/MyDrive/DeepLearning/CNN/Agriculture_Datasets/test/test/diseased cotton plant/dd (21)_iaip.jpg"

def pred_fresh_disease(model, fresh_plant_disease):
  test_image = image.load_img(fresh_plant_disease, target_size = (150,150))
  test_image = image.img_to_array(test_image)/255
  test_image = np.expand_dims(test_image, axis =0)

  result = model.predict(test_image).round(3)

  pred= np.argmax(result)
  print(result, "--->>", pred)


  if pred == 0:
    print('Predicted--->> Disease Cotton Leaf')
  if pred == 1:
      print('Predicted--->> Disease Cotton Plant')
  if pred == 2:
      print('Predicted--->> Fresh Cotton Leaf')
  else:
      print('Predicted--->> Fresh Cotton Plant')

"""Predicting the Model"""

for fresh_plant_disease in [fl1,fl2,fl3,fl4,fp1,fp2,fp3,fp4,dl1,dl2,dl3,dl4,dp1,dp2,dp3,dp4]:
  pred_fresh_disease(trained_model, fresh_plant_disease)